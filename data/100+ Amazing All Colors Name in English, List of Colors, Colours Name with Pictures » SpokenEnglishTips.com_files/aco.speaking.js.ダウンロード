function doRate(text, speaking_text) {	
	if(speaking_text === "") {
		$('#speaking-text').html(text);
		$("#rating-stars").html("");
		return; 
	}
	
	let diff = compareAudioByWords(speaking_text, text);
	$('#speaking-text').html(diff[0]);
	
	let normal_speaking_text = speaking_text.replace(/\p{P}/gu, " ").replace(/\s\s+/g, ' ').trim();
	let normal_text = text.replace(/\p{P}/gu, " ").replace(/\s\s+/g, ' ').trim();
	diff = compareAudioByWords(normal_speaking_text, normal_text);
	var diffAdd = diff[1];
	var diffRemove = diff[2];
	var diffV = 0;
	if(diffAdd === 0) {
		diffV = diffRemove;
	} else if(diffRemove === 0) {
		diffV = diffAdd;
	} else {
		diffV = diff[1] > diff[2] ? diff[1] : diff[2];
	}
	// var diffV = diff[1] > diff[2] ? diff[2] : diff[1];
	var wordCount = normal_text.split(" ").length;
	let newRatedSpeakingWords = wordCount - diffAdd - diffRemove;
	if(newRatedSpeakingWords > ratedSpeakingWords) {
		ratedSpeakingWords = newRatedSpeakingWords;
	}
	
	let audioText1 = ["Don't worry, try gain.", "You can do it.", "Not bad at all! Keep on trying!", "A good try!", "You're learning fast! Keep working on it, you’re improving.", "One more time and you’ll have it"];
	const audioText5 = ["Perfect!", "You're awesome!", "You're the best!", "You're enough!", "You deserve a medal!", "Congratulations!", "That's impressive!", "Wow, you are so skilled!", "This is insanely good."];
	const audioText4 = ["Very good!", "Well done! Good job! Great!", "Wonderful!", "Awesome!", "Nice work!", "Excellent job!", "Impressive work!", "Outstanding work!", "Great job!", "Terrific job!", "You are very good at that."];
	const audioText3 = ["Good!", "Pretty good!", "Very good!", "Nice!", "Your progress is truly inspiring.", "Good work.", "You're doing this right.", "Beautiful work.", "Fantastic!", "You're doing well!", "You certainly did well.", "That’s quite an improvement."]
	const audioText2 = ["Not bad.", "Good.", "That's okay.", "Let's practice more.", "All Right!", "Way to go!", "Good going!", "That’s right!", "What a good try!", "You're a fast learner.", "That’s coming along nicely"];
	let audioText = audioText1;
	// var sameV = diff[3];
	let rateV = 1- diffV / wordCount;
	var rate = 0;
	if(rateV >= 0.8) {
		rate = 10;
		audioText = audioText5;
	} else if(rateV >= 0.7) {
		rate = 9;
		audioText = audioText4;
	} else if(rateV >= 0.6) {
		rate = 8;
		audioText = audioText4;
	} else if(rateV >= 0.5) {
		rate = 7;
		audioText = audioText3;
	} else if(rateV >= 0.4) {
		rate = 6;
		audioText = audioText3;
	} else if(rateV >= 0.3){
		rate = 5;
		audioText =audioText2;
	} else if(rateV >= 0.2) {
		rate = 4;
		audioText = audioText2;
	} else if(rateV >= 0.1) {
		audioText = audioText1;
		rate = 2;
	}
	

	currentScore = rate/2;
	var rateHtml = acoRatingHtml(rate);
	$("#rating-stars").html(rateHtml);
	let rateAudioText = audioText[Math.floor(Math.random()*audioText.length)];
  
  var audioDelay = 1600;
  if(currentScore < 4.0) {
    audioDelay = currentScore * 400;
  }
  
	let currentLevl = parseInt($('#speaking-level-val').text());
	let newLevl = currentLevl;
	if(currentScore >= 4.0) {
		newLevl = currentLevl + 1;
	} else if(currentScore < 3.0) {
		newLevl = currentLevl - 1;
	}
	if(newLevl < 1) {
		newLevl = 1;
	}
	
	let level_alter = newLevl - currentLevl;
	let levelHtml = '<div class="level-change">Level</div>';
	if(level_alter > 0) {
		levelHtml = `<div class="level-change">Level <i class="material-icons-outlined">north</i> ${level_alter}</div>`
	} else if(level_alter < 0) {
		level_alter = level_alter * -1;
		levelHtml = `<div class="level-change">Level<i class="material-icons-outlined">south</i> ${level_alter}</div>`
	}
	levelHtml = levelHtml + `<div class="level-new">${newLevl}</div>`;

	$('#speaking-level').html(levelHtml);
	
	$('#speaking-level').show();
	$('#speaking-btn').hide();
	$('#speaking-session-next').show();

  AOS.init({
    duration: 800,
  });
  
  if(currentScore < 4.0) {
    audioDelay = currentScore * 400;
    setTimeout(function() {
    	acoBackgroundPlayAudio(rateAudioText);
    }, audioDelay);
  }

  if(currentScore >= 4.0) {
    console.log("play party");
    playRatingLottie(1500, () => {
      acoBackgroundPlayAudio(rateAudioText);
    });
  }
  
}


var loadSpeakingSessionEndProcessing = false;
function loadSpeakingSessionEnd() {
	if(loadSpeakingSessionEndProcessing) {
		loadSpeakingSessionEndProcessing = false;
		return;
	}
	
	window.parent.postMessage({'action': 'AcoCloseKeyboard'}, '*');

	jQuery.ajax({ 
    type: 'GET', 
    url: "/session_speaking", 
    data: {uid: userid, session_id: currentSessionId },
    dataType: 'html',
    error: function(){
      tipToErrorLoad();
    },
    success: function (data) { 
      loadSpeakingSessionEndProcessing = false;
      let $wrapper = $(data);
      $("body").append($wrapper);
      activeRipple();
			 
      $wrapper.find('#session_speaking-back-btn, #ok-btn').on('click', e => {
        $wrapper.removeClass("slideInUp");
        $wrapper.addClass("fadeOut");
				 
        setTimeout(function(){
          $wrapper.remove();
        }, 1000);
        loadChatSessionNext();
      });
      
	   }
	});
}


function acoSpeakingPlayAudio(voiceText) {
	var	text = voiceText.replaceAll("acoDQ", "\"").replaceAll("acoSQ", "'");
	
	$("#speaking-play-btn-icon").addClass("red-ripple");

  jQuery.ajax({
    type: 'GET',
    url: '/audio',
    data: {uid: userid, msg: text},
    dataType: 'json',
    error: function(){
      tipToErrorLoad();
    },
    success: function (data) {
      var audio_url = data.audio_url;
      var audio = new Audio(audio_url);
      audio.play();
			audio.onended = function() {
				$("#speaking-play-btn-icon").removeClass("red-ripple");
			}
    }
  });
}


var tip = null;
var dialog = null;
var ratedSpeakingWords = 0;
function loadSpeaking(messenger, text) {	
	jQuery.ajax({ 
    type: 'GET', 
    url: "/msg_speaking", 
    data: {uid: userid, text: text },
    dataType: 'html',
    error: function(){
      tipToErrorLoad();
    },
    success: function (data) { 
      let $wrapper = $(data);
      $("body").append($wrapper);
      activeRipple();
      currentScore = 0;
      ratedSpeakingWords = 0;
		  
      $wrapper.find('#speaking-back-btn').on('click', e => {
        $wrapper.removeClass("fadeIn");
        $wrapper.addClass("fadeOut");
        setTimeout(function(){
          $wrapper.remove();
          initUserMsg = text;
	        // send the message
	        messenger.send(text, function() {
            addChatScore();
	        });
        }, 1000);
      });
			 
      $wrapper.find('#next-ok-btn').on('click', e => {
        $wrapper.removeClass("fadeIn");
        $wrapper.addClass("fadeOut");
        setTimeout(function(){
          $wrapper.remove();
	        initUserMsg = text;
          messenger.send(text, function() {
						 addChatScore();
	         });
         }, 1000);
			 });
			 
		   let $tip_close_btn = $("#main-tip-close");
		   tip = mdc.snackbar.MDCSnackbar.attachTo(document.querySelector('#main-tip'));
		   $tip_close_btn.on("click", e => {
		     tip.close();
		   });
			 
		   dialog = mdc.dialog.MDCDialog.attachTo(document.querySelector('#main-dialog-alert'));
			 
			 
		   let $speaking_btn = $('#speaking-btn');
		   let $speaking_btn_a = $('#speaking-btn-a');

			 $('#speaking-text').on("click", e => {
			 		acoSpeakingPlayAudio(text);
			 })

		   let listening = false;
		   let speaking_text = "";
      
		   const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
		   if (typeof SpeechRecognition !== "undefined") {
		     const recognition = new SpeechRecognition();
		     recognition.lang = 'en-US';

		     const stop = () => {
		       recognition.stop();
		       console.log("speaking text: " + speaking_text);
		       $($speaking_btn_a).removeClass("pressed");
					 $("#speaking-btn-icon").removeClass("white-ripple");
					 doRate(text, speaking_text);
					 
		     };

		 		const start = () => {
		 			speaking_text = "";
		 			try {
		 				recognition.start();
		 			} catch(err) {
		 				$('#main-tip-text').text("Failed to start recognition: " + err);
		 				if(!tip.isOpen) {
		 					tip.open();
		 				}
		 			}
		 			$($speaking_btn_a).addClass("pressed");
					$("#speaking-btn-icon").addClass("white-ripple");
		 		};

		 		const onResult = event => {
		 			for (const res of event.results) {
		 				const rtext = res[0].transcript;
		 				if (res.isFinal) {
		 					console.log("rec end: " + speaking_text);							
							speaking_text = rtext;
							listening = false;
							stop();
		 				} 

		 			}
		 		};
          
		 		recognition.continuous = true;
		 		recognition.interimResults = true;
		 		recognition.addEventListener("result", onResult);
		 		recognition.addEventListener('error', (event) => {
					if(event.error !== "aborted") {
			 			$('#main-tip-text').text(`Speech recognition error detected: ${event.error}`);
			 			if(!tip.isOpen) {
			 				tip.open();
			 			}
					}
		 			
		 		});
				recognition.addEventListener("speechstart", (e) => {
					console.log("speech start");
				});
				
				
				function sleep(ms) {
				  return new Promise(resolve => setTimeout(resolve, ms));
				}
				
				$speaking_btn.on("click", e => {
					e.preventDefault();
					if(listening) {
						console.log("speaking end");
						listening = false;
						stop();
					} else {
						console.log("speaking start");
						listening = true;
					  start();
					}
				});
				
			}
	   }
	});
}

